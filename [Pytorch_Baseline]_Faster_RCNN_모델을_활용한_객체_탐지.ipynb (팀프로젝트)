{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ssuxmin/tmp/blob/main/%5BPytorch_Baseline%5D_Faster_RCNN_%EB%AA%A8%EB%8D%B8%EC%9D%84_%ED%99%9C%EC%9A%A9%ED%95%9C_%EA%B0%9D%EC%B2%B4_%ED%83%90%EC%A7%80.ipynb%20(%ED%8C%80%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fe07c475-d28f-4eaf-93e4-5b29e1bf5ca7",
      "metadata": {
        "id": "fe07c475-d28f-4eaf-93e4-5b29e1bf5ca7"
      },
      "source": [
        "## Import"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "73ad15c3-59f3-4339-b907-098e4c90cb82",
      "metadata": {
        "id": "73ad15c3-59f3-4339-b907-098e4c90cb82"
      },
      "outputs": [],
      "source": [
        "import warnings\n",
        "warnings.filterwarnings(action='ignore') \n",
        "# 프로그램 실행 중에 발생하는 모든 경고 메세지 무시"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "2d89ac05-85bd-489e-ab3f-64dd3d1a5752",
      "metadata": {
        "id": "2d89ac05-85bd-489e-ab3f-64dd3d1a5752"
      },
      "outputs": [],
      "source": [
        "# 이미지 객체 감지를 위한(Fster R-CNN : Faster Region Convolutional Neural Network)모델을 구현\n",
        "\n",
        "import random # 난수생성\n",
        "import pandas as pd \n",
        "import numpy as np \n",
        "import os\n",
        "import glob\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import torch    \n",
        "import torch.nn as nn   #신경망 모델을 정의하기 위한 클래스와 함수들을 제공하는 서브모듈\n",
        "\n",
        "import torchvision   \n",
        "import torchvision.models as models\n",
        "from torchvision.models.detection.faster_rcnn import FastRCNNPredictor, FasterRCNN\n",
        "from torchvision.models.detection.rpn import AnchorGenerator\n",
        "from torchvision.models.detection.backbone_utils import resnet_fpn_backbone\n",
        "\n",
        "import torch.optim as optim   #최적화 알고리즘을 사용하기 위한 모듈\n",
        "import torch.nn.functional as F   #다양한 비선형 활성화 함수, 손실함 수 등 제공하는 모듈\n",
        "from torch.utils.data import Dataset, DataLoader  \n",
        "\n",
        "import cv2\n",
        "import albumentations as A  #이미지 데이터 증강을 위한 라이브러리\n",
        "from albumentations.pytorch.transforms import ToTensorV2 \n",
        "from tqdm.auto import tqdm  #작업 진행 상태를 표시하는 진행 막대를 제공하는 라이브러리"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "id": "e1bf37bc-7627-4191-b77d-9767fb5bb941",
      "metadata": {
        "id": "e1bf37bc-7627-4191-b77d-9767fb5bb941"
      },
      "outputs": [],
      "source": [
        "device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "06e51955-8e5a-4431-b419-11b2a21adc6f",
      "metadata": {
        "id": "06e51955-8e5a-4431-b419-11b2a21adc6f"
      },
      "source": [
        "## Hyperparameter Setting (머신러닝 모델의 동작을 제어, 조정하는 매개변수)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "id": "546e0171-b4e0-4e1f-a4b1-b7ee38abf1c9",
      "metadata": {
        "id": "546e0171-b4e0-4e1f-a4b1-b7ee38abf1c9"
      },
      "outputs": [],
      "source": [
        "CFG = {\n",
        "    'NUM_CLASS':34,   #분류해야 할 클래스 수\n",
        "    'IMG_SIZE':512,   #입력 이미지 크기 (가로 세로 동일하게 설정)\n",
        "    'EPOCHS':10,      #훈련할 에폭 수\n",
        "    'LR':3e-4,        #학습률(learning rate) : 모델이 갱신하는 가중치의 크기를 조절하는 매개변수\n",
        "    'BATCH_SIZE':32,  \n",
        "    'SEED':41         #난수 생성\n",
        "}"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b8687982-d4fb-4a00-a097-d9157081d20a",
      "metadata": {
        "id": "b8687982-d4fb-4a00-a097-d9157081d20a"
      },
      "source": [
        "## Fixed Random-Seed \n",
        "\n",
        "```\n",
        "머신러닝이나 딥러닝 모델을 학습할 때, \n",
        "난수 생성을 제어하기 위해 사용되는 고정된 Seed값\n",
        "```\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "id": "4096b90d-94c5-4bda-bfda-4d056878ec7f",
      "metadata": {
        "id": "4096b90d-94c5-4bda-bfda-4d056878ec7f"
      },
      "outputs": [],
      "source": [
        "def seed_everything(seed):\n",
        "    random.seed(seed)\n",
        "    os.environ['PYTHONHASHSEED'] = str(seed)   #임의성 제거하여 항상 동일한 결과 얻을 수 있음\n",
        "    np.random.seed(seed)                       \n",
        "    torch.manual_seed(seed)\n",
        "    torch.cuda.manual_seed(seed)\n",
        "    torch.backends.cudnn.deterministic = True\n",
        "    torch.backends.cudnn.benchmark = True\n",
        "\n",
        "seed_everything(CFG['SEED']) # Seed 고정"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dc9a2830-c875-48ce-b784-5c1a90d8c9ac",
      "metadata": {
        "id": "dc9a2830-c875-48ce-b784-5c1a90d8c9ac"
      },
      "source": [
        "## Visualization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "id": "b9a01439-3af9-4daa-9dd9-24ee18cead6e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "b9a01439-3af9-4daa-9dd9-24ee18cead6e",
        "outputId": "5bb9cf63-bc45-4443-9f3c-1bcfcce31ba2"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "error",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-31bbf749ce7c>\u001b[0m in \u001b[0;36m<cell line: 33>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;31m# 함수 실행\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m \u001b[0mdraw_boxes_on_image\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannotation_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-33-31bbf749ce7c>\u001b[0m in \u001b[0;36mdraw_boxes_on_image\u001b[0;34m(image_path, annotation_path)\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;31m# 이미지 불러오기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_path\u001b[0m\u001b[0;34m)\u001b[0m                    \u001b[0;31m#이미지를 BGR형식으로 읽어온 후\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcvtColor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCOLOR_BGR2RGB\u001b[0m\u001b[0;34m)\u001b[0m    \u001b[0;31m#RGB 형식으로 변환\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;31m# txt 파일에서 Class ID와 Bounding Box 정보 읽기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31merror\u001b[0m: OpenCV(4.7.0) /io/opencv/modules/imgproc/src/color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'\n"
          ]
        }
      ],
      "source": [
        "def draw_boxes_on_image(image_path, annotation_path):\n",
        "    # 이미지 불러오기\n",
        "    image = cv2.imread(image_path)                    #이미지를 BGR형식으로 읽어온 후\n",
        "    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)    #RGB 형식으로 변환\n",
        "\n",
        "    # txt 파일에서 Class ID와 Bounding Box 정보 읽기\n",
        "    with open(annotation_path, 'r') as file:\n",
        "        lines = file.readlines()   #파일의 각 줄 읽기\n",
        " \n",
        "    for line in lines:\n",
        "        values = list(map(float, line.strip().split(' ')))  \n",
        "        class_id = int(values[0])\n",
        "        x_min, y_min = int(round(values[1])), int(round(values[2]))\n",
        "        x_max, y_max = int(round(max(values[3], values[5], values[7]))), int(round(max(values[4], values[6], values[8])))\n",
        "        #줄을 공백으로 분리한 후, 'float'로 변환한 값을 사용하여 class_id와 좌표값 얻음  \n",
        "\n",
        "\n",
        "        # 이미지에 바운딩 박스 그리기\n",
        "        cv2.rectangle(image, (x_min, y_min), (x_max, y_max), (255, 0, 0), 2)   #사각형 그리기\n",
        "        cv2.putText(image, str(class_id), (x_min, y_min - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2) \n",
        "\n",
        "    # 이미지와 바운딩 박스 출력\n",
        "    plt.figure(figsize=(25, 25))\n",
        "    plt.imshow(image)\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "# 파일 경로 설정(쌍따음표\"\" 안됨!)\n",
        "image_file = 'C:/Python_team/project/train/syn_00001.png'\n",
        "annotation_file = 'C:/Python_team/project/train/syn_00001.txt'\n",
        "\n",
        "# 함수 실행\n",
        "draw_boxes_on_image(image_file, annotation_file)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "02866a07-5d77-4aa9-9374-60e7a525ebc8",
      "metadata": {
        "id": "02866a07-5d77-4aa9-9374-60e7a525ebc8"
      },
      "source": [
        "## Custom Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dde8fd39-8202-4ec6-9b42-88617e6ecae8",
      "metadata": {
        "id": "dde8fd39-8202-4ec6-9b42-88617e6ecae8"
      },
      "outputs": [],
      "source": [
        "def collate_fn(batch):\n",
        "    images, targets_boxes, targets_labels = tuple(zip(*batch)) #zip(*batch)를 사용하여 각 요소 분리\n",
        "    images = torch.stack(images, 0)\n",
        "    targets = []    #리스트 생성\n",
        "    \n",
        "    for i in range(len(targets_boxes)):\n",
        "        target = {\n",
        "            \"boxes\": targets_boxes[i],\n",
        "            \"labels\": targets_labels[i]\n",
        "        }\n",
        "        targets.append(target)\n",
        "\n",
        "    return images, targets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a98b55ec-52df-4518-9df2-202c0d84bf12",
      "metadata": {
        "id": "a98b55ec-52df-4518-9df2-202c0d84bf12"
      },
      "outputs": [],
      "source": [
        "class CustomDataset(Dataset):\n",
        "    def __init__(self, root, train=True, transforms=None): #\n",
        "        self.root = root\n",
        "        self.train = train\n",
        "        self.transforms = transforms\n",
        "        self.imgs = sorted(glob.glob(root+'/*.png'))\n",
        "        \n",
        "        if train:\n",
        "            self.boxes = sorted(glob.glob(root+'/*.txt'))\n",
        "\n",
        "    def parse_boxes(self, box_path):\n",
        "        with open(box_path, 'r') as file:\n",
        "            lines = file.readlines()\n",
        "\n",
        "        boxes = []\n",
        "        labels = []\n",
        "\n",
        "        for line in lines:\n",
        "            values = list(map(float, line.strip().split(' ')))\n",
        "            class_id = int(values[0])\n",
        "            x_min, y_min = int(round(values[1])), int(round(values[2]))\n",
        "            x_max, y_max = int(round(max(values[3], values[5], values[7]))), int(round(max(values[4], values[6], values[8])))\n",
        "\n",
        "            boxes.append([x_min, y_min, x_max, y_max])\n",
        "            labels.append(class_id)\n",
        "\n",
        "        return torch.tensor(boxes, dtype=torch.float32), torch.tensor(labels, dtype=torch.int64)\n",
        "\n",
        "    def __getitem__(self, idx):  \n",
        "        img_path = self.imgs[idx]\n",
        "        img = cv2.imread(self.imgs[idx])\n",
        "        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32)\n",
        "        img /= 255.0\n",
        "        height, width = img.shape[0], img.shape[1]\n",
        "#RGB형식으로 변경하고 값을 255로 나누어서 정규화\n",
        "\n",
        "\n",
        "        if self.train:\n",
        "            box_path = self.boxes[idx]\n",
        "            boxes, labels = self.parse_boxes(box_path)\n",
        "            labels += 1 # Background = 0\n",
        "\n",
        "            if self.transforms is not None:   #'transforms'가 None이 아닌경우, 데이터 전처리 수행\n",
        "                transformed = self.transforms(image=img, bboxes=boxes, labels=labels)\n",
        "                img, boxes, labels = transformed[\"image\"], transformed[\"bboxes\"], transformed[\"labels\"]\n",
        "                \n",
        "            return img, torch.tensor(boxes, dtype=torch.float32), torch.tensor(labels, dtype=torch.int64)\n",
        "\n",
        "        else:\n",
        "            if self.transforms is not None:\n",
        "                transformed = self.transforms(image=img)\n",
        "                img = transformed[\"image\"]\n",
        "            file_name = img_path.split('/')[-1]\n",
        "            return file_name, img, width, height\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.imgs)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7a2ec3ca-d53e-4248-b028-580ed7170345",
      "metadata": {
        "id": "7a2ec3ca-d53e-4248-b028-580ed7170345"
      },
      "outputs": [],
      "source": [
        "# 데이터 전처리 수행(함수 : get_train_transforms & get_test_transforms)\n",
        "def get_train_transforms():  \n",
        "    return A.Compose([\n",
        "        A.Resize(CFG['IMG_SIZE'], CFG['IMG_SIZE']), #세로 : CFG['IMG_SIZE'] 가로 : CFG['IMG_SIZE']\n",
        "        ToTensorV2(),   #이미지 Tensor로 변환,\n",
        "        # 이미지 데이터를 0-1 사이의 값으로 정규화한 후, 이미지의 차원을 변환하여 -> 텐서 형태로 변환\n",
        "    ], bbox_params=A.BboxParams(format='pascal_voc', label_fields=['labels']))\n",
        "\n",
        "# 바운딩 박스 정보를 제외한 이미지 전처리만 수행!!\n",
        "def get_test_transforms():\n",
        "    return A.Compose([\n",
        "        A.Resize(CFG['IMG_SIZE'], CFG['IMG_SIZE']),\n",
        "        ToTensorV2(),\n",
        "    ])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5de0e2ef-7d2d-49cc-b006-322486cccc22",
      "metadata": {
        "id": "5de0e2ef-7d2d-49cc-b006-322486cccc22"
      },
      "outputs": [],
      "source": [
        "train_dataset = CustomDataset('./train', train=True, transforms=get_train_transforms())\n",
        "test_dataset = CustomDataset('./test', train=False, transforms=get_test_transforms())\n",
        "\n",
        "# DataLoader 생성\n",
        "train_loader = DataLoader(train_dataset, batch_size=CFG['BATCH_SIZE'], shuffle=True, collate_fn=collate_fn)\n",
        "test_loader = DataLoader(test_dataset, batch_size=CFG['BATCH_SIZE'], shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "CFG['BATCH_SIZE']"
      ],
      "metadata": {
        "id": "4mOQBSudj9Ob"
      },
      "id": "4mOQBSudj9Ob",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "x5NwxeeSj-Jz"
      },
      "id": "x5NwxeeSj-Jz",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_dataset = CustomDataset('C:/Users/user/OneDrive/바탕 화면/project/train', train=True, transforms=get_train_transforms())\n",
        "test_dataset = CustomDataset('C:/Users/user/OneDrive/바탕 화면/project/test', train=False, transforms=get_test_transforms())\n",
        "\n",
        "# DataLoader 생성\n",
        "train_loader = DataLoader(train_dataset, batch_size=CFG['BATCH_SIZE'], shuffle=True, collate_fn=collate_fn)\n",
        "test_loader = DataLoader(test_dataset, batch_size=CFG['BATCH_SIZE'], shuffle=False)"
      ],
      "metadata": {
        "id": "nve-l2RSjYde"
      },
      "id": "nve-l2RSjYde",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "07d7f99f-aa83-4050-843b-34d8132c3fab",
      "metadata": {
        "id": "07d7f99f-aa83-4050-843b-34d8132c3fab"
      },
      "source": [
        "## Define Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c21fc74e-3c61-42d0-be1c-30f37a954d3f",
      "metadata": {
        "id": "c21fc74e-3c61-42d0-be1c-30f37a954d3f"
      },
      "outputs": [],
      "source": [
        "def build_model(num_classes=CFG['NUM_CLASS']+1):\n",
        "    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)  #미리 학습된 가중치를 사용 => 모델 초기화\n",
        "    in_features = model.roi_heads.box_predictor.cls_score.in_features\n",
        "    model.roi_heads.box_predictor = torchvision.models.detection.faster_rcnn.FastRCNNPredictor(in_features, num_classes)\n",
        "    return model"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "705b0c4d-0f2e-4732-9bb1-17ceb032a9fe",
      "metadata": {
        "id": "705b0c4d-0f2e-4732-9bb1-17ceb032a9fe"
      },
      "source": [
        "## Train & Validation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "54e9b62a-4401-4254-a873-e7895824baac",
      "metadata": {
        "id": "54e9b62a-4401-4254-a873-e7895824baac"
      },
      "outputs": [],
      "source": [
        "def train(model, train_loader, optimizer, scheduler, device):\n",
        "    model.to(device)\n",
        "\n",
        "    best_loss = 9999999\n",
        "    best_model = None\n",
        "    \n",
        "    for epoch in range(1, CFG['EPOCHS']+1):\n",
        "        model.train()       # 모델을 학습 모드로 설정\n",
        "        train_loss = []     # train_loss 리스트를 초기\n",
        "        for images, targets in tqdm(iter(train_loader)):\n",
        "            images = [img.to(device) for img in images]\n",
        "            targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n",
        "            \n",
        "            optimizer.zero_grad()       # 기울기 초기화\n",
        "\n",
        "            loss_dict = model(images, targets)\n",
        "            losses = sum(loss for loss in loss_dict.values()) #손실들을 모두 더하여 'losses'에 저장\n",
        "\n",
        "            losses.backward()  # 역전파 수행\n",
        "            optimizer.step()   # 가중치 업데이트\n",
        "\n",
        "            train_loss.append(losses.item())\n",
        "\n",
        "        if scheduler is not None:\n",
        "            scheduler.step()\n",
        "        \n",
        "        tr_loss = np.mean(train_loss)  \n",
        "\n",
        "        print(f'Epoch [{epoch}] Train loss : [{tr_loss:.5f}]\\n')\n",
        "        \n",
        "        if best_loss > tr_loss:\n",
        "            best_loss = tr_loss\n",
        "            best_model = model\n",
        "    \n",
        "    return best_model\n",
        "# 최적의 모델 : 학습 중 가장 낮은 손실을 갖는 모델"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2ec48874-5d17-4389-beb2-5d3f830586b5",
      "metadata": {
        "id": "2ec48874-5d17-4389-beb2-5d3f830586b5"
      },
      "outputs": [],
      "source": [
        "model = build_model()\n",
        "\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=CFG['LR'])\n",
        "scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.5)\n",
        "\n",
        "infer_model = train(model, train_loader, optimizer, scheduler, device)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "895dd613-39a3-4c14-80c4-4a2cee53c2a2",
      "metadata": {
        "id": "895dd613-39a3-4c14-80c4-4a2cee53c2a2"
      },
      "source": [
        "## Inference & Submission"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ecaf4cff-bebd-4090-b3f9-76260aa3bf83",
      "metadata": {
        "id": "ecaf4cff-bebd-4090-b3f9-76260aa3bf83"
      },
      "outputs": [],
      "source": [
        "def box_denormalize(x1, y1, x2, y2, width, height):\n",
        "    x1 = (x1 / CFG['IMG_SIZE']) * width\n",
        "    y1 = (y1 / CFG['IMG_SIZE']) * height\n",
        "    x2 = (x2 / CFG['IMG_SIZE']) * width\n",
        "    y2 = (y2 / CFG['IMG_SIZE']) * height\n",
        "    return x1.item(), y1.item(), x2.item(), y2.item()\n",
        "\n",
        "def inference(model, test_loader, device):\n",
        "    model.eval()\n",
        "    model.to(device)\n",
        "    \n",
        "    results = pd.read_csv('./sample_submission.csv')\n",
        "\n",
        "    for img_files, images, img_width, img_height in tqdm(iter(test_loader)):\n",
        "        images = [img.to(device) for img in images]\n",
        "\n",
        "        with torch.no_grad():\n",
        "            outputs = model(images)\n",
        "\n",
        "        for idx, output in enumerate(outputs):\n",
        "            boxes = output[\"boxes\"].cpu().numpy()\n",
        "            labels = output[\"labels\"].cpu().numpy()\n",
        "            scores = output[\"scores\"].cpu().numpy()\n",
        "\n",
        "            for box, label, score in zip(boxes, labels, scores):\n",
        "                x1, y1, x2, y2 = box\n",
        "                x1, y1, x2, y2 = box_denormalize(x1, y1, x2, y2, img_width[idx], img_height[idx])\n",
        "                results = results.append({\n",
        "                    \"file_name\": img_files[idx],\n",
        "                    \"class_id\": label-1,\n",
        "                    \"confidence\": score,\n",
        "                    \"point1_x\": x1, \"point1_y\": y1,\n",
        "                    \"point2_x\": x2, \"point2_y\": y1,\n",
        "                    \"point3_x\": x2, \"point3_y\": y2,\n",
        "                    \"point4_x\": x1, \"point4_y\": y2\n",
        "                }, ignore_index=True)\n",
        "\n",
        "    # 결과를 CSV 파일로 저장\n",
        "    results.to_csv('baseline_submit.csv', index=False)\n",
        "    print('Done.')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a64e14d4-e441-4685-a337-3fd0ac57165a",
      "metadata": {
        "id": "a64e14d4-e441-4685-a337-3fd0ac57165a"
      },
      "outputs": [],
      "source": [
        "inference(infer_model, test_loader, device)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "PyTorch 1.14 (NGC 22.12/Python 3.8) on Backend.AI",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}